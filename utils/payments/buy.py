import logging
import sqlite3

from aiogram import types, Router, Bot, F
import json

from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode, ContentType
from aiogram.types import PreCheckoutQuery, FSInputFile

from config import CURRENCY, WALLET_TOKEN_BUY, BOT_TOKEN, DATABASE, AMOUNT
from db_handler.database import get_promo_by_code, update_user_balance_plus, insert_transaction, \
    update_user_guide_purchased_and_ref_by
from keyboards.keyboards import payment_keyboard

router = Router()

bot = Bot(token=BOT_TOKEN,
          default=DefaultBotProperties(parse_mode=ParseMode.HTML))

async def bot_send_invoice_buy_guide(chat_id, amount, promo_code):
    prices = [types.LabeledPrice(label=CURRENCY, amount=amount*100)]

    provider_data = {
        "receipt": {
            "items": [
                {
                    "description": "–ì–∞–π–¥",
                    "quantity": "1.00",
                    "amount": {
                        "value": f"{amount:.2f}",
                        "currency": CURRENCY
                    },
                    "vat_code": 1
                }
            ]
        }
    }
    provider_data = json.dumps(provider_data)

    await bot.send_invoice(
        chat_id=chat_id,
        title="–ì–∞–π–¥",
        description="–ü–æ–∫—É–ø–∞–π –≥–∞–π–¥ –∏ –Ω–∞—á–∏–Ω–∞–π –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –¥–µ–Ω—å–≥–∏!",
        payload=promo_code,
        provider_token=WALLET_TOKEN_BUY,
        currency=CURRENCY,
        prices=prices,
        reply_markup=payment_keyboard(amount),
        need_phone_number = True,
        send_phone_number_to_provider = True,
        provider_data = provider_data
    )


@router.pre_checkout_query(lambda query: True)
async def process_pre_checkout_query(pre_checkout_query: PreCheckoutQuery):
    try:
       await bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True)  # –≤—Å–µ–≥–¥–∞ –æ—Ç–≤–µ—á–∞–µ–º —É—Ç–≤–µ—Ä–¥–∏—Ç–µ–ª—å–Ω–æ
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞–ø–¥–µ–π—Ç–∞ —Ç–∏–ø–∞ PreCheckoutQuery: {e}")

@router.message(F.content_type == ContentType.SUCCESSFUL_PAYMENT)
async def handle_successful_payment(message: types.Message):
    user_id = message.from_user.id
    payment_id = message.successful_payment.provider_payment_charge_id
    amount = message.successful_payment.total_amount/100
    promo_code = message.successful_payment.invoice_payload or None

    file = FSInputFile('file/–ö—É–ø–ª–µ–Ω–Ω—ã–π_–∫—É—Ä—Å.pdf', filename="–ö—É–ø–ª–µ–Ω–Ω—ã–π –≥–∞–π–¥.pdf")
    await message.answer_document(file, protect_content=True)
    file_text = "üì¶ <b>–¢–æ–≤–∞—Ä –≤–∫–ª—é—á–∞–µ—Ç —Ñ–∞–π–ª:</b>" if file else "üìÑ <b>–¢–æ–≤–∞—Ä –Ω–µ –≤–∫–ª—é—á–∞–µ—Ç —Ñ–∞–π–ª—ã:</b>"
    product_text = (
        f"üéâ <b>–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!</b>\n\n"
        f"üõí <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–µ–º —Ç–æ–≤–∞—Ä–µ:</b>\n"
        f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
        f"üîπ <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> <b>–ì–∞–π–¥</b>\n"
        f"üîπ <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>\n<i>–ì–∞–π–¥ –ø–æ –∑–∞—Ä–∞–±–æ—Ç–∫—É!</i>\n"
        f"üîπ <b>–¶–µ–Ω–∞:</b> <b>{amount}‚ÇΩ</b>\n"
        f"üîπ <b>–ó–∞–∫—Ä—ã—Ç–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:</b>\n<i>–ì–∞–π–¥ –±—ã–ª —Å–æ—Å—Ç–∞–≤–ª–µ–Ω –ò–≤–∞–Ω–æ–º</i>\n"
        f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
        f"{file_text}\n\n"
        f"‚ÑπÔ∏è <b>–ú–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å —Ä–∞–±–æ—Ç–∞—Ç—å –≤ –±–æ—Ç–µ.</b>"
    )

    if promo_code != 'None':
        promo = get_promo_by_code(promo_code)
        discount = promo[1]  # –°–∫–∏–¥–∫–∞
        ref_by = promo[2]  # ID –≤–ª–∞–¥–µ–ª—å—Ü–∞ –ø—Ä–æ–º–æ–∫–æ–¥–∞
        save_db(user_id, payment_id, amount, discount, ref_by)
    else: save_db(user_id, payment_id, amount,0, None)


    await message.answer("‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–∏–Ω—è—Ç–∞!")
    await message.answer(f"{product_text}")

def save_db(user_id, payment_id, amount, discount, ref_by):
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–∫—É–ø–∫–µ
    update_user_guide_purchased_and_ref_by(user_id, ref_by)
    insert_transaction(user_id, payment_id, amount, 'purchase')

    # –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –±–æ–Ω—É—Å–∞
    if ref_by:
        referral_bonus = amount/(100 - discount) * 100 * 0.25
        update_user_balance_plus(ref_by, referral_bonus)
        insert_transaction(ref_by, payment_id, referral_bonus, 'referral_reward')

        update_user_balance_plus('0001', referral_bonus)
        insert_transaction('0001', payment_id, referral_bonus, 'admin_bank_percent')
    else:
        update_user_balance_plus('0001', amount)
        insert_transaction('0001', payment_id, amount, 'admin_bank')




