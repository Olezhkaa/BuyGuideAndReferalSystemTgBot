
import logging
from aiogram import Bot, Dispatcher, types, F
from aiogram import Router
from aiogram.enums import ContentType
from aiogram.types import WebAppInfo

from db_handler.database import get_user_by_id, update_user_balance_minus
from keyboards.keyboards import out_money_get_card
from utils.payments.withdrawal import make_payout_card

router = Router()

@router.callback_query(lambda call: call.data == "out_money")
async def out_money_test(call):
    user = get_user_by_id(call.from_user.id)
    if int(user[2]) < 2500:
        await call.message.answer("‚ùå –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ ‚ùå\n\n"
                                  "<i>–î–ª—è –≤—ã–≤–æ–¥–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –º–∏–Ω–∏–º—É–º 2500 RUB</i>", reply_markup=types.ReplyKeyboardRemove())
    else:
        await call.message.answer(f"üí∏ <b>–í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤</b> üí∏\n\n"
                                  f"<i>–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –≤—ã–≤–µ—Å—Ç–∏ –¥–µ–Ω—å–≥–∏ –Ω–∞ –∫–∞—Ä—Ç—É –±–∞–Ω–∫–∞</i>",
                                  reply_markup=out_money_get_card())

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ WebApp
@router.message(F.content_type == ContentType.WEB_APP_DATA)
async def web_app_data_handler(message: types.Message):
    try:
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ WebApp
        data = message.web_app_data.data
        parsed_data = eval(data)  # –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º JSON-—Å—Ç—Ä–æ–∫—É)
        payout_token = parsed_data.get("payout_token")

        user_id = message.from_user.id
        user = get_user_by_id(user_id)
        amount = user[2]

        if amount < 2500:
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ ‚ùå\n\n"
                                 "<i>–î–ª—è –≤—ã–≤–æ–¥–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –º–∏–Ω–∏–º—É–º 2500 RUB</i>")
            return

        if payout_token:
            # –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å –ø–æ–ª—É—á–µ–Ω–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º
            response = await make_payout_card(payout_token, amount, "–í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤")

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Çx
            if "error" not in response:
                await message.answer(
                    f"‚úÖ –í—ã–ø–ª–∞—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ: ‚úÖ\n\n"
                    #f"ID –≤—ã–ø–ª–∞—Ç—ã: {response['id']}\n"
                    f"–°—É–º–º–∞: {response['amount']['value']} {response['amount']['currency']}\n"
                    f"–°—Ç–∞—Ç—É—Å: {response['status']}\n"
                    f"–û–ø–∏—Å–∞–Ω–∏–µ: {response['description']}\n", reply_markup=types.ReplyKeyboardRemove())

                update_user_balance_minus(id_user_tg=user_id, amount_withdrawal=amount)
            else:
                await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –≤—ã–ø–ª–∞—Ç—ã:\n{response['error']}", reply_markup=types.ReplyKeyboardRemove())

        else:
            await message.answer("–û—à–∏–±–∫–∞: —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –¥–∞–Ω–Ω—ã—Ö.", reply_markup=types.ReplyKeyboardRemove())
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {str(e)}", reply_markup=types.ReplyKeyboardRemove())




#async def withdrawal_balance_callback(call, payout_token):
#     # –ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ—Å—Ç–∞
#     account_number = "4100116075156746"  # –¢–µ—Å—Ç–æ–≤—ã–π –∫–æ—à–µ–ª–µ–∫
#     amount = 100.00  # –°—É–º–º–∞ –≤—ã–ø–ª–∞—Ç—ã
#     description = "–¢–µ—Å—Ç–æ–≤–∞—è –≤—ã–ø–ª–∞—Ç–∞"
#
#     # –í—ã–ø–æ–ª–Ω—è–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –≤—ã–ø–ª–∞—Ç—É
#     response = await make_payout_yoomoney(account_number, amount, description)
#
#     # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
#     if "error" not in response:
#         await call.message.answer(
#             f"–í—ã–ø–ª–∞—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ:\n"
#             f"ID –≤—ã–ø–ª–∞—Ç—ã: {response['id']}\n"
#             f"–°—É–º–º–∞: {response['amount']['value']} {response['amount']['currency']}\n"
#             f"–°—Ç–∞—Ç—É—Å: {response['status']}\n"
#             f"–û–ø–∏—Å–∞–Ω–∏–µ: {response['description']}\n"
#             f"–¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º: {response['test']}"
#         )
#     else:
#         await call.message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –≤—ã–ø–ª–∞—Ç—ã:\n{response['error']}")
